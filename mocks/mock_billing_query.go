// Code generated by MockGen. DO NOT EDIT.
// Source: queries/billing.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/candrap89/loanApi/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBillingQuery is a mock of BillingQuery interface.
type MockBillingQuery struct {
	ctrl     *gomock.Controller
	recorder *MockBillingQueryMockRecorder
}

// MockBillingQueryMockRecorder is the mock recorder for MockBillingQuery.
type MockBillingQueryMockRecorder struct {
	mock *MockBillingQuery
}

// NewMockBillingQuery creates a new mock instance.
func NewMockBillingQuery(ctrl *gomock.Controller) *MockBillingQuery {
	mock := &MockBillingQuery{ctrl: ctrl}
	mock.recorder = &MockBillingQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingQuery) EXPECT() *MockBillingQueryMockRecorder {
	return m.recorder
}

// GetBillingByID mocks base method.
func (m *MockBillingQuery) GetBillingByID(userID int) ([]models.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingByID", userID)
	ret0, _ := ret[0].([]models.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingByID indicates an expected call of GetBillingByID.
func (mr *MockBillingQueryMockRecorder) GetBillingByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingByID", reflect.TypeOf((*MockBillingQuery)(nil).GetBillingByID), userID)
}

// GetDeliquentUsers mocks base method.
func (m *MockBillingQuery) GetDeliquentUsers() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliquentUsers")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliquentUsers indicates an expected call of GetDeliquentUsers.
func (mr *MockBillingQueryMockRecorder) GetDeliquentUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliquentUsers", reflect.TypeOf((*MockBillingQuery)(nil).GetDeliquentUsers))
}

// GetLatestWeek mocks base method.
func (m *MockBillingQuery) GetLatestWeek(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestWeek", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestWeek indicates an expected call of GetLatestWeek.
func (mr *MockBillingQueryMockRecorder) GetLatestWeek(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestWeek", reflect.TypeOf((*MockBillingQuery)(nil).GetLatestWeek), userID)
}

// GetTotalUnpaidBillAmount mocks base method.
func (m *MockBillingQuery) GetTotalUnpaidBillAmount(userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalUnpaidBillAmount", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalUnpaidBillAmount indicates an expected call of GetTotalUnpaidBillAmount.
func (mr *MockBillingQueryMockRecorder) GetTotalUnpaidBillAmount(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalUnpaidBillAmount", reflect.TypeOf((*MockBillingQuery)(nil).GetTotalUnpaidBillAmount), userID)
}

// InsertBilling mocks base method.
func (m *MockBillingQuery) InsertBilling(billing models.Billing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBilling", billing)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBilling indicates an expected call of InsertBilling.
func (mr *MockBillingQueryMockRecorder) InsertBilling(billing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBilling", reflect.TypeOf((*MockBillingQuery)(nil).InsertBilling), billing)
}

// MarkBillAsPaid mocks base method.
func (m *MockBillingQuery) MarkBillAsPaid(billID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkBillAsPaid", billID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkBillAsPaid indicates an expected call of MarkBillAsPaid.
func (mr *MockBillingQueryMockRecorder) MarkBillAsPaid(billID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkBillAsPaid", reflect.TypeOf((*MockBillingQuery)(nil).MarkBillAsPaid), billID)
}

// MarkBillAsPaidandUpdateOutstanding mocks base method.
func (m *MockBillingQuery) MarkBillAsPaidandUpdateOutstanding(newOutstanding float64, billID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkBillAsPaidandUpdateOutstanding", newOutstanding, billID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkBillAsPaidandUpdateOutstanding indicates an expected call of MarkBillAsPaidandUpdateOutstanding.
func (mr *MockBillingQueryMockRecorder) MarkBillAsPaidandUpdateOutstanding(newOutstanding, billID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkBillAsPaidandUpdateOutstanding", reflect.TypeOf((*MockBillingQuery)(nil).MarkBillAsPaidandUpdateOutstanding), newOutstanding, billID)
}
